(function() {
/* Accordion */

// Adding Up/Down/Left/Right Keyboard functionality to the Accordion component
$('.usa-accordion').keyup(function(event){
  var focusableElements = $(this).find(':focusable'),
      ev = event;

  // Move to previous focusable element
  if (ev.keyCode === 37 || ev.keyCode === 38) {
    var prev = focusableElements[($.inArray(document.activeElement, focusableElements) - 1 + focusableElements.length) % focusableElements.length];
    prev.focus();
  }

  // Move to next focusable element
  if (ev.keyCode === 39 || ev.keyCode === 40) {
    var next = focusableElements[($.inArray(document.activeElement, focusableElements) + 1) % focusableElements.length];
    next.focus();
  }

});
/* Alert Messages */

var vauxAlert = {

  init: function(alertObject){
    this.bindUIFunctions(alertObject);
  },

  bindUIFunctions: function(alertObject) {
    $(alertObject).on('click', 'button', function(){
      var alert = $(this).closest('.vaux-alert-site');

      alert.addClass('slide-closed');
    
      setTimeout(function() {
        $(alert).remove();
      }, 250);

    });
  }
};

$('[data-trigger-site-alert]').each(function(){
  vauxAlert.init(this);
});
/* Button Menus */

var vauxButtonMenu = {

  init: function(buttonMenuObject) {
    this.bindUIfunctions(buttonMenuObject);
  },

  bindUIfunctions: function(buttonMenuObject) {
    $(buttonMenuObject).on('click', '[data-trigger-buttonmenu]', function(event){

      var e = event,
          toggledButton = event.target,
          targetMenu = $(toggledButton).closest('.vaux-button-menu-wrapper').find('.vaux-button-menu'),
          buttonMenuArray = $('[data-trigger-buttonmenu]').not(toggledButton);

      // Close any other menus that are open
      $(buttonMenuArray).each(function(key, value){
        var button = $(buttonMenuArray)[key],
            menu =  $(button).closest('.vaux-button-menu-wrapper').find('.vaux-button-menu');

        if($(button).attr('aria-expanded') === 'true'){
          vauxButtonMenu.close(button, menu);
        }
      });

      if ( $(targetMenu).hasClass('show') ) {
        vauxButtonMenu.close(toggledButton, targetMenu);
      } else {
        vauxButtonMenu.open(toggledButton, targetMenu);
      }

      $(targetMenu).keydown(function(event){
        vauxTrapKeyboard(event, this, {arg1:toggledButton, arg2:targetMenu}, vauxButtonMenu.close);
      });
    });

    // Listen for clicks outside of the button menus
    var touchmoved;

    $(document).on("click touchend", function(event) {
      if(!$(event.target).is('[data-trigger-buttonmenu]')) {
        buttonMenuArray = $('[data-trigger-buttonmenu]');

        // Close any other menus that are open
        if(touchmoved !== true){
            $(buttonMenuArray).each(function(key, value){
            var button = $(buttonMenuArray)[key],
                menu =  $(button).closest('.vaux-button-menu-wrapper').find('.vaux-button-menu');

            if($(button).attr('aria-expanded') === 'true'){
              vauxButtonMenu.close(button, menu);
            }
          });
        }
        
      }
    }).on('touchmove', function(e){
        touchmoved = true;
    }).on('touchstart', function(){
        touchmoved = false;
    });
  },

  open: function(toggledButton, targetMenu){
    $(targetMenu).addClass('show').attr({
      'aria-hidden': 'false',
      'tab-index': '0'
    });

    $(toggledButton).attr('aria-expanded', 'true');
  },

  close: function(toggledButton, targetMenu) {
    $(targetMenu).removeClass('show').attr({
      'aria-hidden': 'true',
      'tab-index': '-1'
    });

    $(toggledButton).attr('aria-expanded', 'false');
  }
};

$('.vaux-button-menu-wrapper').each(function(){
  vauxButtonMenu.init(this);
});
/* Carousel */

var vauxCarousel = {

  init: function(carouselObject){

    this.bindUIfunctions(carouselObject);

    $(carouselObject).slick({
      adaptiveHeight: true,
      dots: true,
      draggable: true,
      focusOnChange: true,
      mobileFirst: true,
      infinite: false,
      dotsClass: 'slick-dots vaux-carousel-dots',
      nextArrow: '<button class="vaux-carousel-next">Next</button>',
      prevArrow: '<button class="vaux-carousel-prev">Previous</button>'
    });
  },

  bindUIfunctions: function(carouselObject) {
     $(carouselObject).on('init', function(event, slick, direction){
      vauxCarousel.createLiveRegion(carouselObject);
      vauxCarousel.updateLiveRegion(carouselObject);
    });

    $(carouselObject).on('afterChange', function(event, slick, direction){
      vauxCarousel.updateLiveRegion(carouselObject);
    });
  },

  createLiveRegion: function(carouselObject) {
    var liveregion = '<div aria-live="polite" aria-atomic="true" class="liveregion usa-sr-only"></div>';
    $(carouselObject).append(liveregion);
  },

  updateLiveRegion: function(carouselObject) {
    var slides = $(carouselObject).find('.slick-track li'),
        currentSlide = slides.filter('.slick-current'),
        slideIndex = slides.index(currentSlide);

    $(carouselObject).children('.liveregion').text('Item ' + (slideIndex + 1) + ' of ' + slides.length);
  }
};


$("[data-carousel-trigger]").each(function(){
  vauxCarousel.init(this);
});

/* Date Input - Date Picker */

// Turning off Bootstrap datepicker API to initialize with our own options here
$(document).off('.datepicker.data-api');

function openDatepicker(toggledInput) {
  console.log('opening');
}

function closeDatePicker(toggledInput) {
  console.log('closing');
}

function initDatePicker() {
  $('[data-datepicker-trigger]').each(function () {
    // datepicker should be on an input or button directly, not a parent
    // in order to work properly (and close when you click off of it)
    $(this).datepicker({
      format: 'mm/dd/yyyy',
      todayHighlight: true,
      templates: {
          leftArrow: '<i class="fa fa-caret-left" aria-hidden="true"></i>',
          rightArrow: '<i class="fa fa-caret-right" aria-hidden="true"></i>',
      },
      daysOfWeekDisabled: '0',
      assumeNearbyYear: true,
      maxViewMode: 'year',
      autoclose: true,
      immediateUpdates: true
    }).on('changeDate', function (e) {
      $(this).find('.vaux-datepicker').hide();
    });
    $(this).find('.vaux-datepicker').hide();
});
}

// For mobile browsers, change the date picker inputs to type date
// in order to force the native UI on the phone/tablet
if (/Mobi/.test(navigator.userAgent)) {
  $('input[data-datepicker-trigger]').attr('type', 'date');
  $('button[data-datepicker-trigger]').on('click', function (e) {
      $(e.target).siblings('input').get(0).focus();
  });
} else {
  initDatePicker();
}
/* File Upload */

var vauxFileUpload = {

  init: function(uploadObject) {
    
    this.config = {
      fileStore: []
    };

    this.bindUIFunctions(uploadObject, this.config.fileStore);
  },

  bindUIFunctions: function(uploadObject, fileStore) {
    // trigger upload on space & enter (= standard button functionality)
    $(uploadObject).on('keydown', 'label span[role=button]', function(event) {
      if(event.keyCode === 32 || event.keyCode === 13){
        event.preventDefault();
        $('#fileUpload').click();
      }
    });

    $(uploadObject).on('change', 'input', function(event){
      // Add to list and remove progress bar from view (show view/remove buttons)
      vauxFileUpload.uploadFiles(event.target, fileStore);
    });

    // File Actions
    $(uploadObject).on('click', '.file-actions', function(event) {
      if ($(event.target).is("button")) {
        vauxFileUpload.removeFile(event, fileStore);
      }
    });

    
  },

  removeFile: function(event, fileStore) {
    var file = $(event.target).closest('.vaux-file-item'),
        fileName = file.find('.file-info span:first-of-type')[0].innerHTML;

    file.slideUp("fast", function() {
      $(this).remove();

    });

    // Remove file from file list array
    for (var i = 0; i < fileStore.length; i++) {
      if(fileStore[i].name === fileName) {
          fileStore.splice(i,1);
          break;
      }
    }

    // If file list array is empty after this removal, hide the file list container
    var fileList = $(event.target).closest('.vaux-file-list');

    if ($(fileList).children().length === 1) {
      $(fileList).parent().addClass('hidden');
    }
  },

  formatBytes: function(bytes, decimals) {
    if(bytes === 0) return '0 Bytes';
    var k = 1000,
        dm = decimals || 1,
        sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
        i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + sizes[i];
  },

  uploadFiles: function(input, fileStore) {
    var list = $(input).siblings('.vaux-file-list-wrapper').children('.vaux-file-list').get(0),
        listContainer;

    $.each( input.files, function(i) {

      var fileName = input.files[i].name,
          fileSize = input.files[i].size,
          fileSizeConverted = vauxFileUpload.formatBytes(fileSize);

      var fileListTemplate = '<li class="vaux-file-item">' +
                               '<div>' +
                                 '<div class="file-info">' +
                                   '<span>' + fileName + '</span> ' +
                                   '<span>(' + fileSizeConverted + ')</span>' +
                                 '</div>' +
                                 '<ul class="file-actions" role="menubar" aria-label="File Actions">' +
                                   '<li class="hidden"><a href="#">View</a></li>' +
                                   '<li class="hidden"><button class="vaux-link" type="button">Remove</button></li>' +
                                   '<li><button class="vaux-link" type="button">Cancel</button></li>' +
                                 '</ul>' +
                               '</div>' +
                               '<progress class="hidden" max="100" value="0">0% uploaded</progress>' +
                              '</li>';
      // append to file list
      $(list).append(fileListTemplate);

      // If file list container is hidden because this is the first added file, show it
      listContainer = $(input).siblings('.vaux-file-list-wrapper').get(0);

      if ($(list).children().length >= 1) {
        $(listContainer).removeClass('hidden');
      }

      // MOCK ERROR
      var errorMessageTemplate = '<span class="usa-input-error-message" id="input-error-message" role="alert">' +
                                 'This file exceeds the 2 MB limit.' +
                                 '</span>';

      if ($(input).attr('data-trigger-error-state')) {
        $(list).children('.vaux-file-item').last().find('> div').append(errorMessageTemplate);
        $(listContainer).children('.usa-input-error').removeClass('hidden');
      // END MOCK ERROR
      } else {
        // Success

        // Add file to fileStore array
        fileStore.push(input.files[i]);

        // target the progress bar and animate upload processing
        var fileProgressBar = $(list).children('.vaux-file-item').last().find('progress').removeClass('hidden');
        vauxFileUpload.updateProgressBar(fileProgressBar);
      }

     

      
    });
  },

  updateProgressBar: function(fileProgressBar) {
    var msecsPerUpdate = 1000/60, // # of milliseconds between updates, this gives 60fps
        progress =  fileProgressBar,
        duration = 3; // # of seconds to animate for
        interval = progress.attr('max')/(duration*1000/msecsPerUpdate);
        
        var animator = function(){
            progress.val(progress.val() + interval);

            if (progress.val() + interval < progress.attr('max')){
               setTimeout(animator, msecsPerUpdate);
            } else {
                progress.val(progress.attr('max'));

                progress.fadeOut();

                vauxFileUpload.adjustActionBar(fileProgressBar);
            }
        };

        animator();
  },

  adjustActionBar: function(fileProgressBar) {
    var actionBar = fileProgressBar.siblings().find('.file-actions').children('li');

    $.each(actionBar, function(i){
      $(actionBar[i]).toggleClass('hidden');
    });
  }

};

$('[data-file-upload-trigger]').each(function(){
  vauxFileUpload.init(this);
});
/* Graphs - HighCharts.js */

/************
/* Theming
/************/

// Light HighCharts theme
Highcharts.lightTheme = {
  colors: ['#8ba6c9', '#122e51', '#48a463', '#0071bb', '#e59393'],
  chart: {
    borderRadius: 3,
    spacing: [55, 40, 35, 40],
    style: {
      "fontFamily":"\"Source Sans Pro\",\"Lucida Grande\", \"Lucida Sans Unicode\", Verdana, Arial, Helvetica, sans-serif",
      "fontSize":"15px",
      "font-weight": 100
    },
    zoomType: 'xy'
  },
  title: {
    y: -10,
    style: {
      color: '#212121',
      font: 'bold 19px "Source Sans Pro", Helvetica, Verdana, sans-serif'
    }
  },
  subtitle: {
    y: 15,
    style: {
      color: '#323a44',
      font: '500 17px "Source Sans Pro", Helvetica, Verdana, sans-serif'
    }
  },
  yAxis: {
    lineWidth: 0,
    lineColor: "#d6d7d9",
    title: {
      style: {
        color: '#5b616a'
      },
      x: -15
    },
    labels: {
      style: {
        color: '#5b616a',
        font: 'bold 15px "Source Sans Pro", Helvetica, Verdana, sans-serif'
      }
    }
  },
  xAxis: {
    lineColor: "#d6d7d9",
    labels: {
      y: 30,
      style: {
        color: '#5b616a',
        font: 'bold 15px "Source Sans Pro", Helvetica, Verdana, sans-serif',
      }
    },
  },
  legend: {
    itemDistance: 30,
    itemStyle: {
      font: '15px "Source Sans Pro", Helvetica, Verdana, sans-serif',
      'font-weight': 900,
      color: '#323a44',
    },
    itemHoverStyle:{
      color: '#5b616b'
    },
    symbolWidth: 20,
    margin: 30
  },
  tooltip: {
    backgroundColor: "rgba(250,250,250,1)",
    borderWidth: 0,
    style: {
      "color": '#212121',
      "fontSize": "15px"
    },
    headerFormat: '<span style="font-size: 15px">{point.key}</span><br/>',
    pointFormat: '<span style="font-size: 18px; color:{point.color}">\u25CF</span> {series.name}: {point.y}<br/>'
  },
  plotOptions: {
    series: {
        marker: {
            radius: 6
        }
    }
}
};

// Apply the lightTheme as a default
Highcharts.setOptions(Highcharts.lightTheme);


// Dark HighCharts theme
var darkTheme = {
  colors: ['#9bdaf1', '#f9c642', '#48a463', '#ffffff', '#e59393'],
  chart: {
    backgroundColor: '#112e51',
  },
  title: {
    style: {
      color: '#FFFFFF'
    }
  },
  subtitle: {
    style: {
      color: 'rgba(250,250,250,0.7)'
    }
  },
  yAxis: {
    gridLineColor: 'rgba(250,250,250,0.29)',
    title: {
      style: {
        color: 'rgba(250,250,250,0.7)'
      },
      x: -15
    },
    labels: {
      style: {
        color: 'rgba(250,250,250,0.7)',
        font: 'bold 15px "Source Sans Pro", Helvetica, Verdana, sans-serif'
      }
    }
  },
  xAxis: {
    lineColor: 'rgba(250,250,250,0.29)',
    tickColor: 'rgba(250,250,250,0.29)',
    labels: {
      style: {
        color: 'rgba(250,250,250,0.7)',
        font: 'bold 15px "Source Sans Pro", Helvetica, Verdana, sans-serif'
      }
    }
  },
  legend: {
    itemStyle: {
      color: '#FFFFFF'
    },
    itemHoverStyle:{
      color: '#d6d7d9'
    }
  }
};

/*******************
/* Chart Creation
/*******************/

if ($('#testChart').length !== 0) { // Wrapping so that this is only called when testChart is on the page - Graphs/Charts page
  var myChart = new Highcharts.Chart('testChart', {
    chart: {
      type: 'line'
    },
    title: {
      text: 'Temperature'
    },
    subtitle: {
      text: '11/02/2015 - 9/12/2016'
    },
    xAxis: {
      categories: ["Nov '15", "Jan '16", "Mar '16", "May '16", "Jul '16", "Sep '16"]
    },
    yAxis: {
      type: 'linear',
      title: {
        text: 'Degrees (Farenheit)'
      }
    },
    series: [{
      name: 'Jane',
      data: [81, 86.6, 79.8, 81, 86.6, 70]
    }, {
      name: 'John',
      data: [86.7, 80, 70, 86.7, 80, 70]
    }, {
      name: 'Jake',
      data: [72.5, 83.7, 73, 76.4, 82, 79]
    }, {
      name: 'Jill',
      data: [67.8, 72.2, 86.6, 68.1, 71.5, 68.6]
    }, {
      name: 'Joel',
      data: [62.3, 65, 63, 63.5, 66, 87]
    }]
  });
}

if ($('#testChartTwo').length !== 0) {

  var myChartTwo = new Highcharts.Chart('testChartTwo', Highcharts.merge(darkTheme, {
    chart: {
      type: 'line'
    },
    title: {
      text: 'Temperature'
    },
    subtitle: {
      text: '11/02/2015 - 9/12/2016'
    },
    xAxis: {
      categories: ["Nov '15", "Jan '16", "Mar '16", "May '16", "Jul '16", "Sep '16"]
    },
    yAxis: {
      type: 'linear',
      title: {
        text: 'Degrees (Farenheit)'
      },
      plotBands: [{
        color: 'rgba(250,250,250,0.1)', // Color value
        from: 70, // Start of the plot band
        to: 80 // End of the plot band
      }]
    },
    series: [{
      name: 'Jane',
      data: [81, 86.6, 79.8, 81, 86.6, 70]
    }, {
      name: 'John',
      data: [86.7, 80, 70, 86.7, 80, 70]
    }, {
      name: 'Jake',
      data: [72.5, 83.7, 73, 76.4, 82, 79]
    }, {
      name: 'Jill',
      data: [67.8, 72.2, 86.6, 68.1, 71.5, 68.6]
    }, {
      name: 'Joel',
      data: [62.3, 65, 63, 63.5, 66, 87]
    }]
  }));
}




/* Load More */

var vauxLoadMore = {

  init: function(loadMoreObject) {
    this.bindUIfunctions(loadMoreObject);
  },

  bindUIfunctions: function(loadMoreObject) {
    var loadMore = $(loadMoreObject).find("[data-loading-trigger]");
    
    // when you click the Load More button, show/hide the content divs
    loadMore.on('click touchstart', function (e) {
      var contentSections = $(loadMoreObject).find('tr:hidden');

      e.preventDefault();

      // show one section at a time
      contentSections.delay(1000).slice(0, 1).slideDown();

      $('html,body').animate({
        scrollTop: $(this).offset().top
      }, 1500);

      // if no sections remain to reveal - hide the loading trigger
      if (contentSections.length === 1) {
        $(e.target).delay(1000).fadeOut('slow');
      }
    });
  }
};

$('[data-load-more-trigger]').each(function(){
    vauxLoadMore.init(this);
});
/* Loading Indicator */

var vauxLoadingIndicator = {

  init: function(indicatorObject){
    this.bindUIFunctions(indicatorObject);
  },

  bindUIFunctions: function(indicatorObject){
    $(indicatorObject).on('click', function(e){
      if ($(e.target).is('[data-loader="inline"]') && !$(e.target).is['disabled']) {
        vauxLoadingIndicator.create(e.target);
        vauxLoadingIndicator.loadingData(e);

        /* 
        ** setTimeout is used for working example.
        ** This function should be called when server response is done or page is done loading data
        */

        setTimeout(function() { vauxLoadingIndicator.loadDataComplete(e); }, 1000);

      } else {
        vauxLoadingIndicator.create('body');
        vauxLoadingIndicator.loadingPage(e);

        /* 
        ** setTimeout is used for working example.
        ** This function should be called when server response is done or page is done loading data
        */

        setTimeout(function() { vauxLoadingIndicator.loadPageComplete(e); }, 3000);
      }
    });

    // Check for TAB or SHIFT+TAB key press and prevent user from navigating while page is loading
    $(document).on('keydown', function(event){
      var ev = event;
      if ($('#activeIndicator.loading').length !== 0 && !$('.vaux-loading-indicator').hasClass('indicator-inline')) {
        if (ev.keyCode === 9 || ev.keyCode == 13  ) {
          ev.preventDefault();
        }
      }
    });
  },

  create: function(location){
    var loadingIndTemplate = $('<div/>', {
          'id': 'activeIndicator',
          'role': 'status',
          'aria-live': 'assertive'
        }),
        iconClass = 'vaux-loading-indicator-icon star',
        icons = [],
        iconCount = 8,
        i = 1; // counter for icons

    // Creating eight icon divs to be placed inside wrapper
    while (i <= iconCount) {
      var icon = $('<div/>', {
        'class': 'vaux-loading-indicator-icon star'+i,
      });
      icons.push(icon);
      i++;
    }

    loadingIndTemplate.append(icons);

    if (location == 'body') {

      loadingIndTemplate.addClass('vaux-loading-indicator');
      $('<span class="usa-sr-only">Loading. Please wait.</span>').appendTo(loadingIndTemplate);
      $(location).append(loadingIndTemplate);
    
    } else {

      loadingIndTemplate.addClass('vaux-loading-indicator--inline');
      $('<span class="usa-sr-only">Processing.</span>').appendTo(loadingIndTemplate);
      $(location).append(loadingIndTemplate);
    
    }
  },

  loadingPage: function(e){
    var el = e.target;

    $('body').addClass('overlay').attr('aria-busy','true');
    $('#activeIndicator').addClass('loading');

    $('body').on('touchmove', function(e){e.preventDefault();});

    if ($(el).is('[data-color="inverted"]')) {
      $('#activeIndicator').addClass('indicator-inverted');
    }
  },

  loadPageComplete: function(e) {
    var loadingCompleteTemplate = $('<div/>', {
          'class': 'usa-sr-only vaux-loading-complete-status',
          'role': 'status',
          'aria-live': 'polite',
          'aria-label': 'Loading complete.'
        }).html('Loading complete.');

    $('body').prepend(loadingCompleteTemplate).focus();
    $('body').removeClass('overlay').attr('aria-busy', 'false');
    $('#activeIndicator').remove();
    $('body').unbind('touchmove');
    setTimeout(function() { $('.vaux-loading-complete-status').remove(); }, 1000);
  },

  loadingData: function(e) {
    $(e.target).addClass('vaux-element-loading').attr({
      'disabled':'disabled',
      'tab-index': '-1',
      'aria-busy':'true',
      'aria-label': 'Processing.',
    });
    $(e.target).children('.vaux-loading-indicator--inline').addClass('loading');

    if ($(e.target).is('[data-color="inverted"]')) {
      $(e.target).children('.vaux-loading-indicator--inline').addClass('indicator-inverted');
    }
  },

  loadDataComplete: function(e) {
    $(e.target).removeClass('vaux-element-loading').removeAttr('disabled').attr({
      'tab-index': '0',
      'aria-busy':'false',
      'aria-label': 'Processing complete.',
      'aria-live': 'status'
    });
    $(e.target).children('.vaux-loading-indicator--inline').remove();

    setTimeout(function() { $(e.target).removeClass('vaux-element-loading').removeAttr('aria-label'); }, 500);
  }
};

$('[data-loading-trigger]').each(function(){
  vauxLoadingIndicator.init(this);
});
/* Modals */

var vauxModal = {

  init: function(modalTrigger){
    this.modal = {
      modalId: '#' + $(modalTrigger).data('attr'),
      modalType: $(modalTrigger).data('modalType'),
      lastFocusedElement: ''
    };

    this.bindUIFunctions(modalTrigger, this.modal);
  },

  bindUIFunctions: function(modalTrigger, modal) {
    $(modalTrigger).on("click touchstart", function(event) {
      event.preventDefault();
      vauxModal.open(modal);
    });

    $(modal.modalId).on("click", ".vaux-modal-footer button, .vaux-modal-close", function(){
      vauxModal.close(modal);
    });

    // Close modal if not the event target
    $(document).on("click", function(event) {
      if ($('.vaux-modal.modal--open').length !== 0 && !$(event.target).is('[data-modal-trigger]') && !$(event.target).is('.vaux-modal.modal--open') && $('.vaux-modal').has(event.target).length === 0) {
        vauxModal.close(modal);
      }
    });
  },

  open: function(modal) {

    modal.lastFocusedElement = document.activeElement;

    // Open the modal with the corresponding ID, place overlay on the body of page, change tabindex and aria-hidden attributes
    $('body').addClass('overlay animate-fadeIn');
    $(modal.modalId).addClass('modal--open animate-fadeIn').attr({
      'tabindex': '0',
      'aria-hidden': 'false'
    }).focus();

    // Add styles for complex modals if modalType matches
    if (modal.modalType == 'complex') {
      $(modal.modalId).addClass('vaux-modal--complex');
      
      // For mobile screens - Getting the height of the header and footer and setting margin/padding of content to match. Wrapped in setTimeout function so that the modal renders and browser can get the right height calculations.
      if ($(window).width() < 768) {
        setTimeout(function(){
          var heights = vauxModal.setHeights(modal.modalId);

          $(modal.modalId + ' .vaux-modal-content').css({
            'margin-bottom': heights[0],
            'margin-top': heights[1]
          });
        }, 100);
      }
    }

    // Listen for and trap the keyboard
    $(modal.modalId).on('keydown', function(event){
      vauxTrapKeyboard(event, this, {arg1:modal}, vauxModal.close);
    });

    event.preventDefault();
  },

  close: function(modal) {
    $('body').removeClass('overlay animate-fadeIn');
    $(modal.modalId).removeClass('modal--open animate-fadeIn').attr({
      'tabindex': '-1',
      'aria-hidden': 'true'
    });

    modal.lastFocusedElement.focus();
  },

  setHeights: function(modalId) {
    var heights = [],
    footerHeight = $(modalId + ' .vaux-modal-footer').outerHeight(),
    headerHeight = $(modalId + ' .vaux-modal-header').outerHeight();
    
    heights.push(footerHeight, headerHeight);
    return heights;
  }
};

$('[data-modal-trigger]').each(function(){
  vauxModal.init(this);
});

/* Main Navigation Menu */

function openMenu() {
  $(menuEl).addClass('menu--open').attr('aria-hidden', 'false');
  $('body').addClass('overlay');
  $('#navOpenBtn').attr({
    'aria-expanded': 'true',
    'aria-hidden': 'true'
  });
  closeMenuCtrl.focus();
}

function closeMenu() {
  $(menuEl).removeClass('menu--open').attr('aria-hidden', 'true');
  $('body').removeClass('overlay');
  $('#navOpenBtn').attr({
    'aria-expanded': 'false',
    'aria-hidden': 'false'
  });
  openMenuCtrl.focus();
}

// Creating new instance of Menu on page
var menuEl = document.getElementById('mpNavMenu');

if (menuEl) {
  var mlmenu = new MLMenu(menuEl, {
    breadcrumbsCtrl : false, // show breadcrumbs
    backCtrl : true, // back control functionality
  });

   // Toggle Menu Open/Close
  var openMenuCtrl = $('#navOpenBtn'),
      closeMenuCtrl = $('#navCloseBtn');

  openMenuCtrl.click(openMenu);
  closeMenuCtrl.click(closeMenu);

  // Close navigation if not the event target
  $(document).on("click touchstart", function(event) {
    if ($('.vaux-nav-menu-wrapper.menu--open').length !== 0 && !$(event.target).is('#navOpenBtn') && $('.vaux-nav-menu-wrapper.menu--open').has(event.target).length === 0) {
      closeMenu();
    }
  });
}


/* Popover */

vauxPopover = {

  init: function(popoverObject) {
    $(popoverObject).popover({
      template: '<div class="vaux-popover popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    this.bindUIFunctions(popoverObject);
  },

  bindUIFunctions: function(popoverObject) {

    // Allow Space to open/close the popover
    $(popoverObject).on('keydown', function(event){
      if (event.keyCode === 32) {
        if ($(".popover").length === 0) {
          $(popoverObject).popover('show');
        } else {
          $(popoverObject).popover('hide');
        }
      }
    });

    // Actions to perform when a popover is loaded into the DOM
    $(popoverObject).on('inserted.bs.popover', function () {

      $(popoverObject).attr('aria-expanded', 'true');

      var popoverID = $(this).attr('aria-describedby');
          targetPopover = $('#' + popoverID).get(0);

      // Close popover if not the event target
      $(document).on('click touchstart', function(event){
        if (!$(event.target).is(popoverObject) && !$(event.target).is(targetPopover) && $(targetPopover).has(event.target).length === 0) {
          console.log('clicked outside of popover');
          $(popoverObject).popover('hide');

        }
      });

      // Close popover when close button or footer buttons are clicked
      $(targetPopover).on("click touchstart", ".vaux-popover-footer button, .vaux-popover-close", function(event){
        console.log('clicked');
        $(popoverObject).popover('hide');
      });

      // Close popover if the ESC key is used within popover
      $(targetPopover).on("keydown", function(event){
        if (event.keyCode === 27) {
          $(popoverObject).popover('hide');
        }
      });

    });

    // Actions to perform when the popover is removed away from the DOM
    $(popoverObject).on('hidden.bs.popover', function (e) {
        $(document).unbind('click touchstart');
        $(targetPopover).unbind('click touchstart keydown');
        $(popoverObject).attr('aria-expanded', 'false');
        $(e.target).data("bs.popover").inState.click = false;
    });
  }
};

$('[data-toggle="popover"]').each(function(){
  vauxPopover.init(this);
});
/* Process List */

vauxProcessList = {

  init: function(processListObject) {
    this.bindUIFunctions(processListObject);
    this.adjustLabels(processListObject);
  },

  bindUIFunctions: function(processListObject){
    $(window).on("resize", function () {
      vauxProcessList.adjustLabels(processListObject);
    });
  },

  adjustLabels: function(processListObject){
    // capture 2 key widths in variables
    var widthContainer = $(processListObject).width(),
        widthLabels = 0;

    // capture the bottom label container
    var bottomLabel = $(processListObject).find('.process-bottom-label');

    // capture the Current step's text
    var currentStepText = $(processListObject).find('.current-step span').text();

    // recalculate width of all the labels together
    $(processListObject).find('span').each(function() {
      widthLabels += parseInt($(this).width(), 10);
    });

    // reset the bottom label
    $(processListObject).find(bottomLabel).empty();

    // remove the class
    $(processListObject).removeClass('has-bottom-label-activated');

    // If the container is too small to hold all Labels,
    // then show only the Bottom Label
    if (widthContainer <= widthLabels) {
      $(processListObject).addClass('has-bottom-label-activated');

      // and add the Current step's text into it
      $(processListObject).find(bottomLabel).append(currentStepText);
    }
  }
};

$( ".vaux-process-list.has-bottom-label" ).each(function() {
  vauxProcessList.init(this);
});
/* Range Input */

var vauxRangeInput = {

  init: function(rangeInputObject) {
    // Set up max and min values for each range input on the screen
    this.rangeInput = {
      rangeInput: $(rangeInputObject).find('input[type="range"]'),
      maxValue: $(rangeInput).attr('max'),
      sliderValue: $(rangeInput).val(),
      minValue: $(rangeInput).attr('min'),
      minMaxWrapper: $(rangeInputObject).find('.vaux-edge-minmax-wrapper'),
      output: $(rangeInputObject).find('output')
    };

    this.setValues(this.rangeInput);
    this.bindUIFunctions();
  },

  setValues: function(rangeInput){
    // Display the current value in the output field if it is present
    if (rangeInput.output) {
      $(rangeInput.output).val(rangeInput.sliderValue);
    }
    
    // Display the min and max numbers for the range slider if they wrapper is present
    if (rangeInput.minMaxWrapper) {
      $(rangeInput.minMaxWrapper).find('span:first-of-type').html(rangeInput.minValue);
      $(rangeInput.minMaxWrapper).find('span:last-of-type').html(rangeInput.maxValue);
    }
  },

  bindUIFunctions: function(){
    $('.vaux-range-input input[type="range"]').on('input change', function(){
      var el = $(this),
          rangeSlider = $(this).parent(),
          sliderValue = $(el).val(),
          output = $(rangeSlider).find('.output-value');
          sliderThumb = $(rangeSlider).find('.vaux-value-wrapper');

      // Change value/aria-valuenow to the current value
      el.attr({
        'aria-valuenow': sliderValue,
        'value': sliderValue
      });

      output.html(sliderValue);

      // Measure width of range input
      var width = el.width();

      // Measure the width of the output area

      var outputWidth = output.width();

      // if the slider is 460 wide and the value of the slider is at the halfway point (should be 230px), then the thumb should be at 50% of the slider

      var newPoint = ((sliderValue / el.attr("max")));

      if (newPoint <= 0.02) {
        newPoint = 0;
      } else if (newPoint == 1) {
        newPoint = width;
      }

      // find the location of the value in relation to the width of the range input

      var newPlace = ((width - outputWidth) * newPoint);

      $(output).css({
        left: newPlace + 'px'
      }).val(sliderValue);

    });
  }
};

$(".vaux-range-input").each(function(){
  vauxRangeInput.init(this);
});

/* Tables */

/* Table Stacked Accordion */
$('.vaux-table--accordion .row').on('keypress click', function(event){
  var e = event;
  var nearestRadio = $(e.target).prev('input');

  // If Enter or Click is performed, then check the nearest radio
  if (e.which === 13 || e.type === 'click') {
    nearestRadio.prop("checked", !nearestRadio.prop("checked"));
  }
});

/* Table Frame to Fixed Scrolling Tables */
function addFramedTableBorder() {

  $("[data-table-framed-trigger]").each(function(){
    var tableContainer = $(this);
    var tableContainerWidth = $(tableContainer).width();

    var tableInner = $(this).find('table');
    var tableInnerWidth = $(tableInner).width();

    // if the Table Container is too small for the Table (has a scrollbar)
    if ( tableContainerWidth < tableInnerWidth) {
      // then add a style with padding/border
      $(tableContainer).css({
          'border':'1px #d6d7d9 solid'
      });
      $(tableInner).css({
          'margin': '1.3rem'
      });
    }
  });
}

addFramedTableBorder();
/* Tabs */

var vauxTabs = {

	init: function(tabObject) {
    this.pageLoadCorrectTab(tabObject);
		this.bindUIfunctions(tabObject);
    this.loadFlexMenus(tabObject);
  },

	bindUIfunctions: function(tabObject) {
		$(tabObject).on("click touchstart", "[data-tabs-navigation] a[href^='#']", function(event) {
      event.preventDefault();
      if (this.hash !== '') {
        vauxTabs.changeTab(this.hash, tabObject);
        vauxTabs.changeButtonText(tabObject);
      }
      
		});

		//This adds keyboard function that pressing an arrow left or arrow right from the tabs toggle the tabs when SHIFT + TAB out of a tab section (content) focus is place back on active tab in navigation. 
		$(tabObject).keydown(function(event) {

      var menuItems = $(tabObject).find('li[role="tab"]'),
          currentTab = menuItems.filter('.vaux-current-tab'),
          currentTabIndex = menuItems.index(currentTab),
          nextTab = menuItems[(currentTabIndex + 1)],
          nextTabHash = $(nextTab).children().attr('href'),
          prevTab = menuItems[(currentTabIndex - 1)],
          prevTabHash = $(prevTab).children().attr('href');
			
			// LEFT
			if ((event.keyCode === 37 || event.keyCode === 38) && prevTabHash !== undefined) {
				vauxTabs.changeTab(prevTabHash, tabObject);

			// RIGHT
			} else if((event.keyCode === 39 || event.keyCode === 40) && nextTabHash !== undefined) {
				vauxTabs.changeTab(nextTabHash, tabObject);
			}

			// SHIFT + TAB
			if ((event.keyCode === 9 && event.shiftKey) && $(event.target).is('.vaux-tabs-section')) {
        currentTab = $(tabObject).find('li.vaux-current-tab a').attr('id');
				$('#' + currentTab).focus();
      }
			
		});

	},

	// If a tab has data-tab-selected="true" then load this tab on page load
	pageLoadCorrectTab: function(tabObject) {
		var tabSelected = $(tabObject).find('[data-tab-selected="true"]');

		if (tabSelected.length !== 0) {
			var tabID = '#' + tabSelected.attr('id');
			this.changeTab(tabID, tabObject);
		}
	},

  // Replace the button menu text with the title of the link that was clicked
  changeButtonText: function (tabObject) {
    var button = $(tabObject).find(".vaux-button-menu-wrapper button");
    var targetText = $(tabObject).find('.vaux-button-menu .vaux-current-tab a').text();

    $(button).text(targetText);
  },

  // Watch functionality to adjust FlexMenu (button menu version) as window is resized
  watchWindowResize: function(tabObject){
    var $wind = $(window),
        mobile;

    var mobileFunctions = function() {
      vauxTabs.collapseToButtonMenu(tabObject);
      vauxTabs.changeButtonText(tabObject);
    };

    var desktopFunctions = function() {
      vauxTabs.expandToFlexMenu(tabObject);
      $(tabObject).find('[data-tabs-navigation]').flexMenu({
        cutoff: 2,
        threshold: 2,
        showOnHover: false,
        linkTextAll: 'More'
      });
    };

    var mobileCheck = function() {

      var window_w = $wind.width();

      if ( window_w < 600 ) {
        if ( mobile ) {
          return;
        } else {
          mobileFunctions();
          mobile = true;
        }
      } else {
        if ( !mobile ) {
          desktopFunctions();
          return;
        } else {
          desktopFunctions();
          mobile = false;
        }
      }
      
    };

    mobileCheck();

    $wind.resize(function() {
      mobileCheck();
    });
  },

  loadFlexMenus: function(tabObject) {
    if ($(tabObject).attr('data-tabs-mobile')) {
      vauxTabs.watchWindowResize(tabObject);
    } else {
      $(tabObject).find('[data-tabs-navigation]').flexMenu({
        cutoff: 0,
        threshold: 0,
        showOnHover: false,
      });
    }
  },

	// When user clicks on a tab, change the tab and the related content below it
	changeTab: function(hash, tabObject) {

		var anchor = $("[href=\\" + hash + "]"),
				div = $(hash),
        selectedTab = anchor.parent();

    var menuItems = $(tabObject).find('li[role="tab"]'),
        currentTab = menuItems.filter('.vaux-current-tab'),
        currentTabIndex = menuItems.index(currentTab),
        nextTab = menuItems[(currentTabIndex + 1)],
        nextTabHash = $(nextTab).children().attr('href'),
        prevTab = menuItems[(currentTabIndex - 1)],
        prevTabHash = $(prevTab).children().attr('href');

		
    // activate correct anchor tab (visually)
		selectedTab.addClass("vaux-current-tab").attr({
			'aria-selected': 'true'
		});

    menuItems.not(selectedTab).removeClass("vaux-current-tab").attr({
     'aria-selected': 'false'
    });

		// activate correct section div (visually)
		div.addClass("vaux-current-tab").attr({
			'aria-hidden': 'false'
		}).focus().siblings().removeClass("vaux-current-tab").attr({
			'aria-hidden': 'true'
		});
	},

	// For tabs that turn into Button Menus on mobile
	collapseToButtonMenu: function(tabObject) {
		var buttonMenuID = $(tabObject).attr('data-tabs-mobile'),
				tabWrapper = $(tabObject),
				tabsNavList = $(tabObject).find('.vaux-tabs-nav').html(),
				menuTemplate = '<div class="vaux-button-menu-wrapper">' +
                        '<button aria-expanded="false" aria-controls="'+buttonMenuID+'" data-trigger-buttonmenu>Button Menu</button>' +
                        '<div id="'+ buttonMenuID+'" class="vaux-button-menu" tabindex="-1" aria-hidden="true">' +
                        '<ul data-tabs-navigation role="tablist">' +
                        tabsNavList +
                        '</ul>' +
                        '</div>' +
                        '</div>';

    $(menuTemplate).prependTo($(tabObject));

    // Initalize Button Menu
    $('.vaux-button-menu-wrapper').each(function(){
      vauxButtonMenu.init(this);
    });

    // Hide the FlexMenu Tabs
		var origTabs = $(tabObject).find('[data-tabs-navigation]').get(1);
    $(origTabs).hide();

    $(tabObject).unbind('keydown');
	},

  expandToFlexMenu: function(tabObject) {
    $('.vaux-button-menu-wrapper').remove();
    var origTabs = $(tabObject).find('[data-tabs-navigation]').get(0);
    $(origTabs).show();
  }
};

$('[data-tabs-trigger]').each(function(){
	vauxTabs.init(this);
});
/* Typeahead Input */

var substringMatcher = function(strs) {
  return function findMatches(q, cb) {
    var matches, substringRegex;

    // an array that will be populated with substring matches
    matches = [];

    // regex used to determine if a string contains the substring `q`
    substrRegex = new RegExp(q, 'i');

    // iterate through the pool of strings and for any string that
    // contains the substring `q`, add it to the `matches` array
    $.each(strs, function(i, str) {
      if (substrRegex.test(str)) {
        matches.push(str);
      }
    });

    cb(matches);
  };
};

var states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
  'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii',
  'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana',
  'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',
  'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire',
  'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota',
  'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island',
  'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',
  'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'
];

var colors = ['Blue', 'Orange', 'Yellow', 'Red', 'Purple', 'Black', 'White', 'Green',
  'Tangerine', 'Aqua', 'Teal', 'Ruby', 'Gray', 'Emerald'
];

$('[data-typeahead-trigger]').typeahead({
  hint: true,
  highlight: true,
  minLength: 1
},
{
  name: 'states',
  source: substringMatcher(states),
},
{
  name: 'colors',
  source: substringMatcher(colors),
});

$('[data-typeahead-trigger]').keyup(function() {
  $('.tt-dataset').each(function(){
    var children = $(this).children().length,
        hasChildren;

    children === 0 ? hasChildren = false : hasChildren = true;

    if (hasChildren === false) {
      $(this).prev().addClass('hidden').removeClass('show');
    } else {
      $(this).prev().addClass('show').removeClass('hidden');
    }

  });
});

$('.tt-dataset').each(function(){

  var datasetName = this.classList[1].slice(11),
      groupNameTemplate = '<div class="vaux-typeahead-menu_group">' +
                          '<span class="vaux-typeahead-menu_group-label">' +
                          datasetName +
                          '</span></div>';



  $(this).before(groupNameTemplate);
});
/* Utility Functions */

// Trap Keyboard within an element that has focusable elements
function vauxTrapKeyboard(event, element, args, escapeFunction) {
  var focusableElements = $(element).find(':focusable'),
      firstTabStop = focusableElements[0],
      lastTabStop = focusableElements[focusableElements.length - 1],
      ev = event;

  // Assign data-first and data-last attributes to the corresponding elements
  $(firstTabStop).attr('data-first', 'true');
  $(lastTabStop).attr('data-last', 'true');

  /// Check for TAB key press
  if (ev.keyCode === 9) {

    // SHIFT + TAB
    if (ev.shiftKey) {
      if (document.activeElement === firstTabStop) {
        ev.preventDefault();
        lastTabStop.focus();
      }

    // TAB
    } else {
      if (document.activeElement === lastTabStop) {
        ev.preventDefault();
        firstTabStop.focus();
      }
    }
  }

  // Move to previous focusable element
  if (ev.keyCode === 37 || ev.keyCode === 38) {
    var prev = focusableElements[($.inArray(document.activeElement, focusableElements) - 1 + focusableElements.length) % focusableElements.length];
    prev.focus();
  }

  // Move to next focusable element
  if (ev.keyCode === 39 || ev.keyCode === 40) {
    var next = focusableElements[($.inArray(document.activeElement, focusableElements) + 1) % focusableElements.length];
    next.focus();
  }

  // ESCAPE
  if (ev.keyCode === 27) {
    escapeFunction(args.arg1, args.arg2);
  }
}
/* Validation */

/* Demo use only */
function validationDemo() {

  var alertBox = $('.validation-demo .usa-alert');
  var inputWithError = $('.demo-has-error');

  // show 1 error
  $('button.show-1-error').click(function(event) {
    event.preventDefault();

    // Hide results from previous click
    $('.demo-has-error').removeClass('usa-input-error');
    $('.demo-has-error .usa-input-error-message').hide();
    $(alertBox).hide();

    // Put error wrapper around erroneous input
    $('.demo-has-error.show-if-1-error').addClass('usa-input-error');
    $('.demo-has-error.show-if-1-error .usa-input-error-message').show();
    $('.demo-has-error.show-if-1-error label').addClass('usa-input-error-label');

    // Change values to demo erroneous values
    $('input#input-error-systolic').val('120');
    $('input#input-error-diastolic').val('90');

    // scroll to top
    $('.demo-has-error.show-if-1-error input').focus();

  });

  // show multiple errors
  $('button.show-multiple-errors').click(function(event) {
    event.preventDefault();

    // Display box with error summary
    $(alertBox).show();
    $('.validation-demo .usa-alert-heading').text('3 errors found:');
    $('.validation-demo .usa-alert ul.usa-checklist').empty().append(
        '<li>The <a tabindex="0" href="javascript:document.getElementById(\'input-error-systolic\').focus()">Systolic</a> value is outside the expected range.</li>\n' +
        '<li><a tabindex="0" href="javascript:document.getElementById(\'input-error-diastolic\').focus()">Diastolic</a> should be less than Systolic. Please check the values.</a></li>\n' +
        '<li><a tabindex="0" href="javascript:document.getElementById(\'input-error-pulse\').focus()">Pulse</a> field is required.</li>'
    );

    // Put error wrapper around erroneous input
    $('.demo-has-error.show-if-many-errors').addClass('usa-input-error');
    $('.demo-has-error.show-if-many-errors .usa-input-error-message').show();
    $('.demo-has-error.show-if-many-errors label').addClass('usa-input-error-label');

    // Change values to demo erroneous values
    $('input#input-error-systolic').val('20');
    $('input#input-error-diastolic').val('20');

    // scroll to top
    $('.validation-demo .usa-alert').focus();

    // when A is clicked, scroll to anchor link
    $('a').click(function(){
        $('html, body').animate({
            scrollTop: $('[name="' + $.attr(this, 'href').substr(1) + '"]').offset().top
        }, 500);
        console.log('works');
        return false;
    });
  });
}

validationDemo();
}());

//# sourceMappingURL=main.min.js.map
